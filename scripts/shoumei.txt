function myFunction() {
  try {
    const gps = "home";
    const homing = "home";
    const time = getCurrentTime();
    const { sleep, morning } = getTimesFromLINE();

    Logger.log(`現在時刻: ${time}, 起床: ${morning}, 就寝: ${sleep}`);

    if (gps === homing) {
      if (isBetween(time, morning, sleep)) {
        Logger.log("起きている時間。照明を点灯します。");
        turnLightOn();
      } else {
        Logger.log("就寝時間。照明を消灯します。");
        turnLightOff();
      }
    } else {
      Logger.log("外出中のため照明を消灯します。");
      turnLightOff();
    }
  } catch (e) {
    Logger.log("エラー発生: " + e.message);
    throw e; // ここで再スローして詳細ログを確認
  }
}



function getTimesFromLINE() {
  const sleepTime = "07:00";    // 就寝時間（仮）
  const morningTime = "23:00";  // 起床時間（仮）
  return { sleep: sleepTime, morning: morningTime };
}

function getCurrentTime() {
  const now = new Date();
  const h = now.getHours().toString().padStart(2, "0");
  const m = now.getMinutes().toString().padStart(2, "0");
  return `${h}:${m}`;
}

function isBetween(current, start, end) {
  const toMin = t => {
    const [h, m] = t.split(":").map(Number);
    return h * 60 + m;
  };
  const c = toMin(current);
  const s = toMin(start);
  const e = toMin(end);

  return s <= e ? (c >= s && c < e) : (c >= s || c < e); // 日をまたぐ場合に対応
}

function getLightSignalId(type) {
  const appliances = getNatureRemoData("appliances");

  for (const appliance of appliances) {
    if (appliance.type === "IR" && appliance.signals) {
      const signal = appliance.signals.find(sig =>
        type === "ON"  ? /ON|オン|点灯/i.test(sig.name) :
        type === "OFF" ? /OFF|オフ|消灯/i.test(sig.name) : false
      );
      if (signal) return signal.id;
    }
  }

  Logger.log(`${type} 信号が見つかりません`);
  return null;
}

function turnLightOn() {
  const signalId = getLightSignalId("ON");
  if (signalId) sendSignalToRemo(signalId);
}

function turnLightOff() {
  const signalId = getLightSignalId("OFF");
  if (signalId) sendSignalToRemo(signalId);
}

